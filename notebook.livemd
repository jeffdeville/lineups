# Nx Testing

## Section

```elixir
Mix.install([
  {:nx, "~> 0.1.0-dev", github: "elixir-nx/nx", branch: "main", sparse: "nx", override: true}
])
```

```elixir
import IEx.Helpers
import Nx.Defn
```

```elixir
player_skills = %{
  Breccan: [0, 5, 4, 5, 4, 5],
  Cameron: [5, 3, 3, 3, 3, 3],
  Evan: [4, 4, 4, 2, 2, 4],
  Harry: [3, 4, 3, 4, 3, 2],
  Isaiah: [0, 4, 3, 4, 4, 3],
  Jack: [4, 5, 4, 3, 3, 4],
  Linsana: [0, 5, 5, 5, 5, 5],
  Lusaine: [0, 5, 5, 5, 5, 5],
  Paco: [0, 3, 3, 5, 3, 3],
  Richard: [0, 2, 1, 2, 1, 1],
  Ryan: [0, 2, 2, 2, 1, 3],
  SamK: [0, 3, 4, 4, 4, 3],
  SamS: [0, 4, 4, 4, 5, 3]
}

position_skill_weightings = %{
  goalie: [1, 0, 0, 0, 0, 0],
  def: [0, 1, 0, 0, 0, 0],
  stopper: [0, 1, 0.3, 1, 1, 1],
  def_mid: [0, 1, 0.6, 1, 0.7, 0.4],
  off_mid: [0, 0.4, 1, 1, 1, 0.9],
  fwd: [0, 0, 1, 0.5, 1, 1]
}

breccan = 0
cameron = 1
evan = 2
harry = 3
isaiah = 4
jack = 5
linsana = 6
lusaine = 7
paco = 8
richard = 9
ryan = 10
samk = 11
sams = 12

goalie = 0
defense = 1
stopper = 2
def_mid = 3
off_mid = 4
fwd = 5
```

```elixir
player_skills = Nx.tensor(Map.values(player_skills))
max_skill = Nx.broadcast(5, {1, 6})

position_skills =
  Nx.tensor([
    # goalie
    [1, 0, 0, 0, 0, 0],
    # def
    [0, 1, 0, 0, 0, 0],
    # stopper
    [0, 1, 0.3, 1, 1, 1],
    # def_mid
    [0, 1, 0.6, 1, 0.7, 0.4],
    # off_mid
    [0, 0.4, 1, 1, 1, 0.9],
    # fwd
    [0, 0, 1, 0.5, 1, 1]
  ])

[player_skills, position_skills, max_skill]
```

```elixir
player_skills[breccan]
|> Nx.Defn.Kernel.*(position_skills[stopper])
|> Nx.sum()
|> Nx.Defn.Kernel./(position_skills[stopper] |> Nx.Defn.Kernel.*(max_skill) |> Nx.sum())
|> Nx.to_scalar()
```
